type Pet {
    id: ID!
    name: String!
    weight: Float!
    breed: String!
    vaccinated: Boolean!
    trainingLevel: Int!
    petOwner: PetOwner
}

type PetOwner {
    id: ID!
    name: String!
    contactInfo: String!
    pets: [Pet]
}

input PetInput {
    name: String!
    weight: Float!
    breed: String!
    vaccinated: Boolean!
    trainingLevel: Int!
    petOwnerId: ID!
}

input PetOwnerInput {
    name: String!
    contactInfo: String!
}

type Mutation {
    addPet(pet: PetInput!): Pet
}

input BreedCriteriaInput {
    breedConditions: [BreedConditionInput!]!
}

input BreedConditionInput {
    breed: String!
    include: Boolean!
}

input TrainingLevelCriteriaInput {
    trainingLevelFrom: Int
    trainingLevelTo: Int
}

input VaccinationCriteriaInput {
    vaccinated: Boolean!
}

input WeightCriteriaInput {
    weightFrom: Float
    weightTo: Float
}

input EligibilityCriteriaInput {
    breedCriteria: BreedCriteriaInput
    trainingLevelCriteria: TrainingLevelCriteriaInput
    vaccinationCriteria: VaccinationCriteriaInput
    weightCriteria: WeightCriteriaInput
}
type Query {
    eligiblePets(after:String, before: String, criteria: EligibilityCriteriaInput!): PetConnection
    checkEligibility(petId: ID!, criteria: EligibilityCriteriaInput!): Boolean
}